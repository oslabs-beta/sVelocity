{"version":3,"file":"BintrayPublisher.js","sourceRoot":"","sources":["../../src/publish/BintrayPublisher.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, InvalidConfigurationError, isEmptyOrSpaces, isTokenCharValid, log, toLinuxArchString } from \"builder-util\"\nimport { BintrayOptions, configureRequestOptions, HttpError, HttpExecutor } from \"builder-util-runtime\"\nimport { BintrayClient, Version } from \"builder-util-runtime/out/bintray\"\nimport { httpExecutor } from \"builder-util/out/nodeHttpExecutor\"\nimport { ClientRequest, RequestOptions } from \"http\"\nimport { Lazy } from \"lazy-val\"\nimport { HttpPublisher, PublishContext, PublishOptions } from \"electron-publish\"\n\nexport class BintrayPublisher extends HttpPublisher {\n  private readonly _versionPromise = new Lazy(() => this.init())\n\n  private readonly client: BintrayClient\n\n  readonly providerName = \"Bintray\"\n\n  constructor(context: PublishContext, info: BintrayOptions, private readonly version: string, private readonly options: PublishOptions = {}) {\n    super(context)\n\n    let token = info.token\n    if (isEmptyOrSpaces(token)) {\n      token = process.env.BT_TOKEN\n      if (isEmptyOrSpaces(token)) {\n        throw new InvalidConfigurationError(\n          `Bintray token is not set, neither programmatically, nor using env \"BT_TOKEN\" (see https://www.electron.build/configuration/publish#bintrayoptions)`\n        )\n      }\n\n      token = token.trim()\n\n      if (!isTokenCharValid(token)) {\n        throw new InvalidConfigurationError(`Bintray token (${JSON.stringify(token)}) contains invalid characters, please check env \"BT_TOKEN\"`)\n      }\n    }\n\n    this.client = new BintrayClient(info, httpExecutor, this.context.cancellationToken, token)\n  }\n\n  private async init(): Promise<Version | null> {\n    try {\n      return await this.client.getVersion(this.version)\n    } catch (e) {\n      if (e instanceof HttpError && e.statusCode === 404) {\n        if (this.options.publish !== \"onTagOrDraft\") {\n          log.info({ version: this.version }, \"version doesn't exist, creating one\")\n          return await this.client.createVersion(this.version)\n        } else {\n          log.warn({ reason: \"version doesn't exist\", version: this.version }, \"skipped publishing\")\n        }\n      }\n\n      throw e\n    }\n  }\n\n  protected async doUpload(fileName: string, arch: Arch, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void) {\n    const version = await this._versionPromise.value\n    if (version == null) {\n      log.warn({ file: fileName, reason: \"version doesn't exist and is not created\", version: this.version }, \"skipped publishing\")\n      return\n    }\n\n    const options: RequestOptions = {\n      hostname: \"api.bintray.com\",\n      path: `/content/${this.client.owner}/${this.client.repo}/${this.client.packageName}/${encodeURI(`${version.name}/${fileName}`)}`,\n      method: \"PUT\",\n      headers: {\n        \"Content-Length\": dataLength,\n        \"X-Bintray-Override\": \"1\",\n        \"X-Bintray-Publish\": \"1\",\n        \"X-Bintray-Debian-Architecture\": toLinuxArchString(arch, \"deb\"),\n      },\n    }\n\n    if (this.client.distribution != null) {\n      options.headers![\"X-Bintray-Debian-Distribution\"] = this.client.distribution\n    }\n\n    if (this.client.component != null) {\n      options.headers![\"X-Bintray-Debian-Component\"] = this.client.component\n    }\n\n    return HttpExecutor.retryOnServerError(() => {\n      return httpExecutor.doApiRequest(configureRequestOptions(options, this.client.auth), this.context.cancellationToken, requestProcessor)\n    })\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  async deleteRelease(isForce = false): Promise<void> {\n    if (!isForce && !this._versionPromise.hasValue) {\n      return\n    }\n\n    const version = await this._versionPromise.value\n    if (version != null) {\n      await this.client.deleteVersion(version.name)\n    }\n  }\n\n  toString() {\n    return `Bintray (user: ${this.client.user || this.client.owner}, owner: ${this.client.owner},  package: ${this.client.packageName}, repository: ${this.client.repo}, version: ${\n      this.version\n    })`\n  }\n}\n"]}