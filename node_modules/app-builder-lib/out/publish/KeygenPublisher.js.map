{"version":3,"file":"KeygenPublisher.js","sourceRoot":"","sources":["../../src/publish/KeygenPublisher.ts"],"names":[],"mappings":";;;AAAA,+CAAoF;AACpF,wEAAgE;AAEhE,uDAAgE;AAEhE,+DAAuF;AACvF,+CAAqD;AAErD,MAAa,eAAgB,SAAQ,gCAAa;IAShD,YAAY,OAAuB,EAAE,IAAmB,EAAE,OAAe;QACvE,KAAK,CAAC,OAAO,CAAC,CAAA;QATP,iBAAY,GAAG,QAAQ,CAAA;QACvB,aAAQ,GAAG,eAAe,CAAA;QAUjC,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAA;QACtC,IAAI,8BAAe,CAAC,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,wCAAyB,CAAC,uHAAuH,CAAC,CAAA;SAC7J;QAED,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,IAAI,GAAG,UAAU,KAAK,CAAC,IAAI,EAAE,EAAE,CAAA;QACpC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,QAAQ,GAAG,gBAAgB,IAAI,CAAC,IAAI,CAAC,OAAO,WAAW,CAAA;IAC9D,CAAC;IAES,QAAQ,CAChB,QAAgB,EAChB,KAAW,EACX,UAAkB,EAClB,gBAAkF;IAClF,6DAA6D;IAC7D,KAAa;QAEb,OAAO,mCAAY,CAAC,kBAAkB,CAAC,KAAK,IAAI,EAAE;YAChD,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAA;YACvE,IAAI,MAAM,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,+CAA+C,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;aACzF;YACD,MAAM,SAAS,GAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,EAAE,CAAA;YAC1B,IAAI,CAAC,SAAS,EAAE;gBACd,kBAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,wCAAwC,EAAE,EAAE,0BAA0B,CAAC,CAAA;gBAC1G,MAAM,IAAI,KAAK,CAAC,gDAAgD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;aACxF;YACD,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,UAAU,EAAE,gBAAgB,CAAC,CAAA;YAClE,OAAO,SAAS,CAAA;QAClB,CAAC,CAAC,CAAA;IACJ,CAAC;IAEO,KAAK,CAAC,cAAc,CAAC,SAAc,EAAE,UAAkB,EAAE,gBAAkF;QACjJ,MAAM,MAAM,GAAmB;YAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,IAAI,SAAS,WAAW;YAC9C,OAAO,EAAE;gBACP,MAAM,EAAE,0BAA0B;gBAClC,gBAAgB,EAAE,UAAU;aAC7B;SACF,CAAA;QACD,MAAM,+BAAY,CAAC,YAAY,CAAC,8CAAuB,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAA;IACtI,CAAC;IAEO,KAAK,CAAC,aAAa,CAAC,QAAgB,EAAE,UAAkB;QAC9D,MAAM,GAAG,GAAmB;YAC1B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,MAAM,EAAE,KAAK;YACb,IAAI,EAAE,IAAI,CAAC,QAAQ;YACnB,OAAO,EAAE;gBACP,cAAc,EAAE,0BAA0B;gBAC1C,MAAM,EAAE,0BAA0B;aACnC;SACF,CAAA;QACD,MAAM,IAAI,GAAG;YACX,IAAI,EAAE;gBACJ,IAAI,EAAE,SAAS;gBACf,UAAU,EAAE;oBACV,QAAQ,EAAE,QAAQ;oBAClB,QAAQ,EAAE,6BAAkB,CAAC,QAAQ,CAAC;oBACtC,QAAQ,EAAE,UAAU;oBACpB,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ;oBAC5B,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,QAAQ;iBACvC;gBACD,aAAa,EAAE;oBACb,OAAO,EAAE;wBACP,IAAI,EAAE;4BACJ,IAAI,EAAE,SAAS;4BACf,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO;yBACtB;qBACF;iBACF;aACF;SACF,CAAA;QACD,kBAAG,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,uBAAuB,CAAC,CAAA;QAClE,OAAO,gCAAS,CAAC,+BAAY,CAAC,OAAO,CAAC,8CAAuB,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAAA;IAC9H,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,SAAiB;QACnC,MAAM,GAAG,GAAmB;YAC1B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,GAAG,IAAI,CAAC,QAAQ,IAAI,SAAS,EAAE;YACrC,OAAO,EAAE;gBACP,MAAM,EAAE,0BAA0B;aACnC;SACF,CAAA;QACD,MAAM,+BAAY,CAAC,OAAO,CAAC,8CAAuB,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAA;IAC/G,CAAC;IAED,QAAQ;QACN,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,IAAI,CAAA;QAChD,OAAO,oBAAoB,OAAO,cAAc,OAAO,eAAe,QAAQ,cAAc,IAAI,CAAC,OAAO,GAAG,CAAA;IAC7G,CAAC;CACF;AA5GD,0CA4GC","sourcesContent":["import { Arch, InvalidConfigurationError, log, isEmptyOrSpaces } from \"builder-util\"\nimport { httpExecutor } from \"builder-util/out/nodeHttpExecutor\"\nimport { ClientRequest, RequestOptions } from \"http\"\nimport { HttpPublisher, PublishContext } from \"electron-publish\"\nimport { KeygenOptions } from \"builder-util-runtime/out/publishOptions\"\nimport { configureRequestOptions, HttpExecutor, parseJson } from \"builder-util-runtime\"\nimport { getCompleteExtname } from \"../util/filename\"\n\nexport class KeygenPublisher extends HttpPublisher {\n  readonly providerName = \"keygen\"\n  readonly hostname = \"api.keygen.sh\"\n\n  private readonly info: KeygenOptions\n  private readonly auth: string\n  private readonly version: string\n  private readonly basePath: string\n\n  constructor(context: PublishContext, info: KeygenOptions, version: string) {\n    super(context)\n\n    const token = process.env.KEYGEN_TOKEN\n    if (isEmptyOrSpaces(token)) {\n      throw new InvalidConfigurationError(`Keygen token is not set using env \"KEYGEN_TOKEN\" (see https://www.electron.build/configuration/publish#KeygenOptions)`)\n    }\n\n    this.info = info\n    this.auth = `Bearer ${token.trim()}`\n    this.version = version\n    this.basePath = `/v1/accounts/${this.info.account}/releases`\n  }\n\n  protected doUpload(\n    fileName: string,\n    _arch: Arch,\n    dataLength: number,\n    requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _file: string\n  ): Promise<any> {\n    return HttpExecutor.retryOnServerError(async () => {\n      const { data, errors } = await this.upsertRelease(fileName, dataLength)\n      if (errors) {\n        throw new Error(`Keygen - Upserting release returned errors: ${JSON.stringify(errors)}`)\n      }\n      const releaseId = data?.id\n      if (!releaseId) {\n        log.warn({ file: fileName, reason: \"UUID doesn't exist and was not created\" }, \"upserting release failed\")\n        throw new Error(`Keygen - Upserting release returned no UUID: ${JSON.stringify(data)}`)\n      }\n      await this.uploadArtifact(releaseId, dataLength, requestProcessor)\n      return releaseId\n    })\n  }\n\n  private async uploadArtifact(releaseId: any, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void) {\n    const upload: RequestOptions = {\n      hostname: this.hostname,\n      path: `${this.basePath}/${releaseId}/artifact`,\n      headers: {\n        Accept: \"application/vnd.api+json\",\n        \"Content-Length\": dataLength,\n      },\n    }\n    await httpExecutor.doApiRequest(configureRequestOptions(upload, this.auth, \"PUT\"), this.context.cancellationToken, requestProcessor)\n  }\n\n  private async upsertRelease(fileName: string, dataLength: number): Promise<{ data: any; errors: any }> {\n    const req: RequestOptions = {\n      hostname: this.hostname,\n      method: \"PUT\",\n      path: this.basePath,\n      headers: {\n        \"Content-Type\": \"application/vnd.api+json\",\n        Accept: \"application/vnd.api+json\",\n      },\n    }\n    const data = {\n      data: {\n        type: \"release\",\n        attributes: {\n          filename: fileName,\n          filetype: getCompleteExtname(fileName),\n          filesize: dataLength,\n          version: this.version,\n          platform: this.info.platform,\n          channel: this.info.channel || \"stable\",\n        },\n        relationships: {\n          product: {\n            data: {\n              type: \"product\",\n              id: this.info.product,\n            },\n          },\n        },\n      },\n    }\n    log.debug({ data: JSON.stringify(data) }, \"Keygen upsert release\")\n    return parseJson(httpExecutor.request(configureRequestOptions(req, this.auth, \"PUT\"), this.context.cancellationToken, data))\n  }\n\n  async deleteRelease(releaseId: string): Promise<void> {\n    const req: RequestOptions = {\n      hostname: this.hostname,\n      path: `${this.basePath}/${releaseId}`,\n      headers: {\n        Accept: \"application/vnd.api+json\",\n      },\n    }\n    await httpExecutor.request(configureRequestOptions(req, this.auth, \"DELETE\"), this.context.cancellationToken)\n  }\n\n  toString() {\n    const { account, product, platform } = this.info\n    return `Keygen (account: ${account}, product: ${product}, platform: ${platform}, version: ${this.version})`\n  }\n}\n"]}