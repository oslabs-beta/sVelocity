{"version":3,"file":"bintray.js","sourceRoot":"","sources":["../src/bintray.ts"],"names":[],"mappings":";;;AACA,iDAAiG;AAiBjG,MAAa,aAAa;IAiBxB,YAAY,OAAuB,EAAmB,YAA+B,EAAmB,iBAAoC,EAAE,MAAsB;QAA9G,iBAAY,GAAZ,YAAY,CAAmB;QAAmB,sBAAiB,GAAjB,iBAAiB,CAAmB;QANpI,mBAAc,GAA0B,IAAI,CAAA;QAOlD,IAAI,OAAO,CAAC,KAAK,IAAI,IAAI,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAA;SAC1C;QACD,IAAI,OAAO,CAAC,OAAO,IAAI,IAAI,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;SAC5C;QAED,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,SAAS,CAAA;QACrC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,OAAO,CAAA;QAClC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAA;QAC1B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,KAAK,CAAA;QACzC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,IAAI,CAAA;QAC1C,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,QAAQ,CAAA;QACpD,IAAI,CAAC,IAAI,GAAG,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,IAAI,MAAM,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAA;QACvG,IAAI,CAAC,QAAQ,GAAG,aAAa,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,CAAA;IAC5E,CAAC;IApBD,iBAAiB,CAAC,KAA4B;QAC5C,IAAI,CAAC,cAAc,GAAG,KAAK,CAAA;IAC7B,CAAC;IAoBO,cAAc,CACpB,IAAY,EACZ,IAAmB,EACnB,OAAuC,IAAI,EAC3C,iBAAoC,EACpC,MAAiC;QAEjC,OAAO,wBAAS,CACd,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,sCAAuB,CAAC,EAAE,QAAQ,EAAE,iBAAiB,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,cAAc,IAAI,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAC5K,CAAA;IACH,CAAC;IAED,UAAU,CAAC,OAAe;QACxB,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,QAAQ,aAAa,OAAO,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAA;IAC7G,CAAC;IAED,eAAe,CAAC,OAAe;QAC7B,OAAO,IAAI,CAAC,cAAc,CAAc,GAAG,IAAI,CAAC,QAAQ,aAAa,OAAO,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAA;IAChI,CAAC;IAED,aAAa,CAAC,OAAe;QAC3B,OAAO,IAAI,CAAC,cAAc,CACxB,GAAG,IAAI,CAAC,QAAQ,WAAW,EAC3B,IAAI,CAAC,IAAI,EACT;YACE,IAAI,EAAE,OAAO;SACd,EACD,IAAI,CAAC,iBAAiB,CACvB,CAAA;IACH,CAAC;IAED,aAAa,CAAC,OAAe;QAC3B,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,QAAQ,aAAa,OAAO,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAA;IACvH,CAAC;CACF;AArED,sCAqEC","sourcesContent":["import { CancellationToken } from \"./CancellationToken\"\nimport { configureRequestOptions, HttpExecutor, parseJson, RequestHeaders } from \"./httpExecutor\"\nimport { BintrayOptions } from \"./publishOptions\"\n\nexport interface Version {\n  readonly name: string\n  //noinspection ReservedWordAsName\n  readonly package: string\n}\n\nexport interface File {\n  name: string\n  path: string\n\n  sha1: string\n  sha256: string\n}\n\nexport class BintrayClient {\n  private readonly basePath: string\n  readonly auth: string | null\n  readonly repo: string\n\n  readonly owner: string\n  readonly user: string\n  readonly component: string | null\n  readonly distribution: string | null\n  readonly packageName: string\n\n  private requestHeaders: RequestHeaders | null = null\n\n  setRequestHeaders(value: RequestHeaders | null) {\n    this.requestHeaders = value\n  }\n\n  constructor(options: BintrayOptions, private readonly httpExecutor: HttpExecutor<any>, private readonly cancellationToken: CancellationToken, apiKey?: string | null) {\n    if (options.owner == null) {\n      throw new Error(\"owner is not specified\")\n    }\n    if (options.package == null) {\n      throw new Error(\"package is not specified\")\n    }\n\n    this.repo = options.repo || \"generic\"\n    this.packageName = options.package\n    this.owner = options.owner\n    this.user = options.user || options.owner\n    this.component = options.component || null\n    this.distribution = options.distribution || \"stable\"\n    this.auth = apiKey == null ? null : `Basic ${Buffer.from(`${this.user}:${apiKey}`).toString(\"base64\")}`\n    this.basePath = `/packages/${this.owner}/${this.repo}/${this.packageName}`\n  }\n\n  private bintrayRequest<T>(\n    path: string,\n    auth: string | null,\n    data: { [name: string]: any } | null = null,\n    cancellationToken: CancellationToken,\n    method?: \"GET\" | \"DELETE\" | \"PUT\"\n  ): Promise<T> {\n    return parseJson(\n      this.httpExecutor.request(configureRequestOptions({ hostname: \"api.bintray.com\", path, headers: this.requestHeaders || undefined }, auth, method), cancellationToken, data)\n    )\n  }\n\n  getVersion(version: string): Promise<Version> {\n    return this.bintrayRequest(`${this.basePath}/versions/${version}`, this.auth, null, this.cancellationToken)\n  }\n\n  getVersionFiles(version: string): Promise<Array<File>> {\n    return this.bintrayRequest<Array<File>>(`${this.basePath}/versions/${version}/files`, this.auth, null, this.cancellationToken)\n  }\n\n  createVersion(version: string): Promise<any> {\n    return this.bintrayRequest<Version>(\n      `${this.basePath}/versions`,\n      this.auth,\n      {\n        name: version,\n      },\n      this.cancellationToken\n    )\n  }\n\n  deleteVersion(version: string): Promise<any> {\n    return this.bintrayRequest(`${this.basePath}/versions/${version}`, this.auth, null, this.cancellationToken, \"DELETE\")\n  }\n}\n"]}